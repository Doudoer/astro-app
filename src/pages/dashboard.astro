---
const title = 'Dashboard';
---

<!DOCTYPE html>
<html lang="es">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{title}</title>
    <style>
      :root{--bg:#f7f7f8;--card:#ffffff;--text:#111827;--muted:#6b7280;--accent:#111827}
      body{font-family:Inter,system-ui,-apple-system,'Segoe UI',Roboto,Arial;background:var(--bg);color:var(--text);margin:0}
      .navbar{height:64px;background:var(--card);display:flex;align-items:center;justify-content:space-between;padding:0 20px;box-shadow:0 6px 20px rgba(17,24,39,0.06)}
      .brand{display:flex;align-items:center;gap:12px}
      .logo{width:36px;height:36px;border-radius:8px;background:linear-gradient(135deg,#111827, #374151);display:flex;align-items:center;justify-content:center;color:white;font-weight:700}
  .navcenter{display:flex;gap:12px;align-items:center}
  .navcenter a{padding:8px 12px;border-radius:8px;color:var(--muted);text-decoration:none;transition:all 160ms cubic-bezier(.2,.8,.2,1);display:inline-flex;align-items:center;gap:8px}
  .navcenter a svg{width:16px;height:16px;flex-shrink:0;transition:transform 180ms, fill 180ms, opacity 180ms}
  .navcenter a:hover{color:var(--text);background:rgba(17,24,39,0.03);transform:translateY(-2px);box-shadow:0 6px 18px rgba(2,6,23,0.04)}
  .navcenter a:hover svg{transform:scale(1.08);opacity:0.95}
  .navcenter a:focus{outline:2px solid rgba(17,24,39,0.06);outline-offset:4px}
  .navcenter a.active{color:var(--text);background:rgba(17,24,39,0.03)}
  .product-result.active{background:rgba(17,24,39,0.04);}
  input[disabled], input:disabled{background:#f3f4f6;color:#9ca3af;border-color:#e6e7eb}
      .profile{position:relative}
  .profilebutton{display:flex;align-items:center;gap:8px;padding:8px;border-radius:8px;cursor:pointer}
  .profilebutton svg{width:16px;height:16px}
  .dropdown{position:absolute;right:0;top:calc(100% + 8px);background:var(--card);box-shadow:0 10px 30px rgba(2,6,23,0.08);border-radius:10px;overflow:hidden;display:none;min-width:200px}
  .dropdown a{display:flex;align-items:center;gap:10px;padding:10px 14px;color:var(--text);text-decoration:none;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;font-size:14px}
  .dropdown a svg{width:16px;height:16px;opacity:0.9;transition:transform 160ms, fill 160ms}
  .dropdown a:hover svg{transform:translateX(4px)}
  .dropdown a:hover{background:#f3f4f6;color:var(--text)}
  .dropdown a + a{border-top:1px solid #f1f1f1}
  /* Botones: pildora verde para primario, pildora blanca para secundario */
  button, .btn { display:inline-flex; align-items:center; gap:8px; font-size:14px; padding:10px 18px; border-radius:999px; border:0; cursor:pointer; color:#fff; text-decoration:none; background:#10b981; box-shadow: 0 6px 18px rgba(2,6,23,0.04) }
  button:focus, .btn:focus{ outline:2px solid rgba(16,185,129,0.18); outline-offset:4px }
  .btn-success{ background:#10b981; color:#fff }
  .btn-danger{ background:#ef4444; color:#fff }
  /* Secondary: white pill with subtle border and dark text */
  .btn-secondary{ background:#ffffff; color:var(--text); border:1px solid #e6e7eb; box-shadow: 0 4px 10px rgba(2,6,23,0.04); }
  .btn-success:hover, .btn-danger:hover, .btn-primary:hover, .btn-secondary:hover{ opacity:0.95; transform:translateY(-1px) }
  button.btn-secondary{ color:var(--text); }
  /* focus styles */
  .btn-success:focus, .btn-danger:focus, .btn-primary:focus, .btn-secondary:focus{ outline:2px solid rgba(17,24,39,0.08); outline-offset:4px }
  /* modal entry animation */
  @keyframes modalIn{ from{opacity:0;transform:translateY(-6px) scale(.995)} to{opacity:1;transform:translateY(0) scale(1)} }
  #productModal > div, #clientModal > div, #docModal > div{ animation: modalIn 180ms ease both; transform-origin: center top }
  /* button active press */
  .btn-success:active, .btn-danger:active, .btn-primary:active{ transform:translateY(0); opacity:0.92 }
      .container{max-width:1100px;margin:28px auto;padding:0 20px}

      /* Responsive */
  .hamburger{display:none;align-items:center;justify-content:center;width:40px;height:40px;border-radius:8px;cursor:pointer}
  .mobile-enter{animation: slideFadeIn 220ms ease forwards;z-index:1000}
  .mobile-leave{animation: slideFadeOut 180ms ease forwards}
  @keyframes slideFadeIn{from{opacity:0;transform:translateY(-6px)}to{opacity:1;transform:translateY(0)}}
  @keyframes slideFadeOut{from{opacity:1;transform:translateY(0)}to{opacity:0;transform:translateY(-6px)}}
      @media (max-width:800px){
        .navcenter{display:none}
        .hamburger{display:flex}
        .profilebutton{padding:10px}
        .dropdown{right:8px;left:8px;min-width:auto;border-radius:8px;position:fixed;top:64px;z-index:1200}
        .dropdown a{font-size:16px;padding:14px}
      }
    </style>
  </head>
  <body>
    <header class="navbar">
      <div class="brand">
        <div class="logo">CHC</div>
        <div class="company">CHC App</div>
      </div>
      <nav class="navcenter">
        <a href="#" class="active" data-view="inicio"><svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M3 11.5L12 4l9 7.5V20a1 1 0 0 1-1 1h-5v-6H9v6H4a1 1 0 0 1-1-1v-8.5z" fill="currentColor"/></svg>Inicio</a>
        <a href="#" data-view="crear"><svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M12 5v14M5 12h14" stroke="currentColor" stroke-width="1.6" stroke-linecap="round" stroke-linejoin="round"/></svg>Crear documento</a>
        <a href="#" data-view="documentos"><svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><rect x="3" y="4" width="18" height="16" rx="2" stroke="currentColor" stroke-width="1.2"/><path d="M7 8h10" stroke="currentColor" stroke-width="1.2" stroke-linecap="round"/></svg>Documentos</a>
        <a href="#" data-view="inventario"><svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M3 7h18M5 7v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V7" stroke="currentColor" stroke-width="1.4" stroke-linecap="round" stroke-linejoin="round"/></svg>Inventario</a>
        <a href="#" data-view="clientes"><svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M3 21v-2a4 4 0 0 1 4-4h10a4 4 0 0 1 4 4v2" stroke="currentColor" stroke-width="1.2" stroke-linecap="round" stroke-linejoin="round"/><circle cx="12" cy="7" r="4" stroke="currentColor" stroke-width="1.2"/></svg>Clientes</a>
      </nav>
      <div style="display:flex;align-items:center;gap:8px">
  <div class="hamburger" id="hamburger" role="button" aria-controls="mobileMenu" aria-expanded="false" aria-label="Abrir menú" tabindex="0">☰</div>
  <div class="profile">
  <div class="profilebutton" id="profileBtn" role="button" aria-haspopup="true" aria-expanded="false" tabindex="0">Perfil ▾</div>
        <div class="dropdown" id="profileMenu">
          <a href="#" id="changePwd"><svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M12 15v2" stroke="currentColor" stroke-width="1.4" stroke-linecap="round"/><path d="M16 11V9a4 4 0 1 0-8 0v2" stroke="currentColor" stroke-width="1.4" stroke-linecap="round" stroke-linejoin="round"/></svg>Cambiar contraseña</a>
          <a href="#" id="createUser"><svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M15 14c1.657 0 3 1.343 3 3v1" stroke="currentColor" stroke-width="1.2" stroke-linecap="round"/><path d="M8 14a4 4 0 1 0 0-8 4 4 0 0 0 0 8z" stroke="currentColor" stroke-width="1.2"/><path d="M20 8v6" stroke="currentColor" stroke-width="1.6" stroke-linecap="round"/></svg>Crear nuevos usuarios</a>
          <a href="#" id="viewUsers"><svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M3 7h18M5 7v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V7" stroke="currentColor" stroke-width="1.4" stroke-linecap="round" stroke-linejoin="round"/></svg>Ver usuarios</a>
          <a href="#" id="logout"><svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M16 17l5-5-5-5" stroke="currentColor" stroke-width="1.4" stroke-linecap="round" stroke-linejoin="round"/><path d="M21 12H9" stroke="currentColor" stroke-width="1.4" stroke-linecap="round" stroke-linejoin="round"/></svg>Cerrar sesión</a>
        </div>
      </div>
    </header>
      <div id="mobileMenu" aria-hidden="true" style="display:none;background:var(--card);box-shadow:0 8px 30px rgba(0,0,0,0.06);padding:8px;border-radius:8px;margin:8px 12px">
        <nav role="menu" aria-label="Menú principal">
          <a role="menuitem" href="#" class="mobile-link" data-view="inicio"><svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M3 11.5L12 4l9 7.5V20a1 1 0 0 1-1 1h-5v-6H9v6H4a1 1 0 0 1-1-1v-8.5z" fill="currentColor"/></svg><span>Inicio</span></a>
          <a role="menuitem" href="#" class="mobile-link" data-view="crear"><svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M12 5v14M5 12h14" stroke="currentColor" stroke-width="1.6" stroke-linecap="round" stroke-linejoin="round"/></svg><span>Crear documento</span></a>
          <a role="menuitem" href="#" class="mobile-link" data-view="documentos"><svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><rect x="3" y="4" width="18" height="16" rx="2" stroke="currentColor" stroke-width="1.2"/><path d="M7 8h10" stroke="currentColor" stroke-width="1.2" stroke-linecap="round"/></svg><span>Documentos</span></a>
          <a role="menuitem" href="#" class="mobile-link" data-view="inventario"><svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M3 7h18M5 7v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V7" stroke="currentColor" stroke-width="1.4" stroke-linecap="round" stroke-linejoin="round"/></svg><span>Inventario</span></a>
          <a role="menuitem" href="#" class="mobile-link" data-view="clientes"><svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M3 21v-2a4 4 0 0 1 4-4h10a4 4 0 0 1 4 4v2" stroke="currentColor" stroke-width="1.2" stroke-linecap="round" stroke-linejoin="round"/><circle cx="12" cy="7" r="4" stroke="currentColor" stroke-width="1.2"/></svg><span>Clientes</span></a>
        </nav>
      </div>

    <main class="container">
      <!-- Views rendered in-place -->
      <section id="view-inicio" class="view-section" style="background:var(--card);padding:28px;border-radius:10px;box-shadow:0 8px 30px rgba(0,0,0,0.06)">
        <h1>Bienvenido al Dashboard</h1>
        <p id="welcome">Cargando...</p>
        <div id="stats" style="display:grid;grid-template-columns:repeat(auto-fit,minmax(200px,1fr));gap:12px;margin-top:18px">
          <div class="stat-card" style="background:linear-gradient(180deg,#fff,#f8fafc);padding:16px;border-radius:10px;box-shadow:0 6px 18px rgba(2,6,23,0.06)">
            <div style="font-size:13px;color:var(--muted)">Productos en catálogo</div>
            <div id="stat-products" style="font-size:28px;font-weight:700;margin-top:8px">—</div>
          </div>
          <div class="stat-card" style="background:linear-gradient(180deg,#fff,#f8fafc);padding:16px;border-radius:10px;box-shadow:0 6px 18px rgba(2,6,23,0.06)">
            <div style="font-size:13px;color:var(--muted)">Clientes registrados</div>
            <div id="stat-clients" style="font-size:28px;font-weight:700;margin-top:8px">—</div>
          </div>
          <div class="stat-card" style="background:linear-gradient(180deg,#fff,#f8fafc);padding:16px;border-radius:10px;box-shadow:0 6px 18px rgba(2,6,23,0.06)">
            <div style="font-size:13px;color:var(--muted)">Cotizaciones pendientes</div>
            <div id="stat-quotes" style="font-size:28px;font-weight:700;margin-top:8px">—</div>
          </div>
          <div class="stat-card" style="background:linear-gradient(180deg,#fff,#f8fafc);padding:16px;border-radius:10px;box-shadow:0 6px 18px rgba(2,6,23,0.06)">
            <div style="font-size:13px;color:var(--muted)">Total ventas (USD)</div>
            <div id="stat-sales" style="font-size:28px;font-weight:700;margin-top:8px">—</div>
          </div>
        </div>
      </section>

      <section id="view-crear" class="view-section" style="display:none;background:var(--card);padding:28px;border-radius:10px;box-shadow:0 8px 30px rgba(0,0,0,0.06)">
        <h1>Crear documento</h1>
        <form id="createDocForm">
          <div style="display:flex;gap:12px;flex-wrap:wrap">
            <div style="flex:1;min-width:160px">
              <label for="tipo">Tipo</label>
              <select id="tipo" name="tipo" style="width:100%;padding:10px;margin-top:6px;border:1px solid #e6e7eb;border-radius:8px">
                <option value="CT">CT - Cotización</option>
                <option value="ND">ND - Nota de Débito</option>
              </select>
            </div>
            <div style="flex:2;min-width:220px">
              <label for="cliente">Cliente</label>
              <select id="cliente" name="cliente" style="width:100%;padding:10px;margin-top:6px;border:1px solid #e6e7eb;border-radius:8px">
                <option value="">Cargando clientes...</option>
              </select>
            </div>
            <div style="min-width:160px">
              <label for="currency">Moneda</label>
              <select id="currency" name="currency" style="width:100%;padding:10px;margin-top:6px;border:1px solid #e6e7eb;border-radius:8px">
                <option value="USD">USD</option>
                <option value="VES">VES</option>
              </select>
            </div>
            <div style="min-width:160px">
              <label for="exchangeRate">Tasa (BCV)</label>
              <input id="exchangeRate" name="exchangeRate" type="number" step="0.000001" value="1.0" style="width:100%;padding:10px;margin-top:6px;border:1px solid #e6e7eb;border-radius:8px" />
              <div style="margin-top:6px;font-size:13px;color:var(--muted)"><span id="bcvRateDisplay" style="margin-left:12px"></span></div>
            </div>
          </div>

          <hr style="margin:16px 0" />

          <div style="display:flex;gap:10px;align-items:end;flex-wrap:wrap">
            <div style="flex:1;min-width:240px;position:relative">
              <label for="productSearch">Buscar producto</label>
              <input id="productSearch" placeholder="Código o descripción" autocomplete="off" aria-autocomplete="list" aria-controls="productResults" style="width:100%;padding:10px;margin-top:6px;border:1px solid #e6e7eb;border-radius:8px" />
              <div id="productResults" role="listbox" aria-label="Resultados de productos" style="display:none;position:absolute;left:0;right:0;top:100%;background:var(--card);box-shadow:0 8px 24px rgba(2,6,23,0.12);border-radius:8px;margin-top:8px;z-index:40;max-height:260px;overflow:auto;padding:6px"></div>
            </div>
            <div style="width:120px">
              <label for="qty">Cantidad</label>
              <input id="qty" type="number" step="0.01" value="1" style="width:100%;padding:10px;margin-top:6px;border:1px solid #e6e7eb;border-radius:8px" />
            </div>
            <div style="width:140px">
              <label for="unitPrice">P. Unit (USD)</label>
              <input id="unitPrice" type="number" step="0.0001" value="0.00" style="width:100%;padding:10px;margin-top:6px;border:1px solid #e6e7eb;border-radius:8px" />
            </div>
            <div>
              <button type="button" id="addItem" class="btn-primary">Agregar</button>
            </div>
          </div>

          <table id="itemsTable" style="width:100%;margin-top:12px;border-collapse:collapse">
            <thead>
              <tr style="text-align:left;border-bottom:1px solid #eef2f6"><th>Producto</th><th>Cantidad</th><th>P.Unit (USD)</th><th>Descuento</th><th>Total (USD)</th><th></th></tr>
            </thead>
            <tbody></tbody>
          </table>

          <div style="margin-top:12px;display:flex;justify-content:flex-end;gap:18px;align-items:center">
            <div style="text-align:right">
              <div id="usdTotals">
                <div>Subtotal USD: <span id="subtotal">0.00</span></div>
                <div>IVA 16%: <span id="tax">0.00</span></div>
                <div style="font-weight:700">Total USD: <span id="total">0.00</span></div>
              </div>
              <div id="bsfTotals" style="display:none">
                <div>Subtotal Bs.F: <span id="subtotalBsf">0.00</span></div>
                <div>IVA Bs.F: <span id="taxBsf">0.00</span></div>
                <div style="font-weight:700">Total Bs.F: <span id="totalBsf">0.00</span></div>
              </div>
              <div id="ivaNote" style="color:var(--muted);margin-top:8px;display:none">Estos precios no incluyen IVA</div>
            </div>
          </div>

          <div style="margin-top:12px;display:flex;gap:10px">
            <button type="submit" class="btn-success">Guardar documento</button>
            <button type="button" id="cancelCreate" class="btn-secondary">Cancelar</button>
          </div>
          <div id="createResult" aria-live="polite" style="margin-top:12px"></div>
        </form>
      </section>

      <section id="view-documentos" class="view-section" style="display:none;background:var(--card);padding:28px;border-radius:10px;box-shadow:0 8px 30px rgba(0,0,0,0.06)">
        <h1>Documentos</h1>
        <div style="margin-top:12px">
          <table id="docsTable" style="width:100%;border-collapse:collapse">
            <thead><tr style="text-align:left;border-bottom:1px solid #eef2f6"><th>#</th><th>Tipo</th><th>Número</th><th>Cliente</th><th>Total (USD)</th><th>Fecha</th><th></th></tr></thead>
            <tbody></tbody>
          </table>
        </div>
        <!-- modal sencillo -->
        <div id="docModal" role="dialog" aria-hidden="true" style="display:none;position:fixed;inset:0;background:rgba(0,0,0,0.4);align-items:center;justify-content:center;padding:20px">
          <div style="background:var(--card);max-width:760px;width:100%;padding:18px;border-radius:10px;box-shadow:0 10px 40px rgba(2,6,23,0.2);position:relative">
              <button id="closeDocModal" class="btn-secondary" style="position:absolute;right:10px;top:10px">Cerrar</button>
            <h2 id="modalDocNumber">Documento</h2>
            <div id="modalBody">Cargando...</div>
            <div style="margin-top:12px;display:flex;gap:10px;justify-content:flex-end">
              <button id="deleteDoc" class="btn-danger">Eliminar</button>
            </div>
          </div>
        </div>
      </section>

      <section id="view-inventario" class="view-section" style="display:none;background:var(--card);padding:28px;border-radius:10px;box-shadow:0 8px 30px rgba(0,0,0,0.06)">
        <h1>Inventario</h1>
        <div style="display:flex;gap:12px;align-items:flex-end;flex-wrap:wrap">
          <!-- código generado automáticamente (no editable por el usuario) -->
          <div style="flex:2;min-width:220px">
            <label for="newDesc">Descripción</label>
            <input id="newDesc" style="width:100%;padding:8px;border:1px solid #e6e7eb;border-radius:8px" />
          </div>
          <div style="width:140px">
            <label for="newPrice">Precio USD</label>
            <input id="newPrice" type="number" step="0.01" value="0.00" style="width:100%;padding:8px;border:1px solid #e6e7eb;border-radius:8px" />
          </div>
          <div><button id="addProduct" class="btn-success">Agregar producto</button></div>
          <div style="min-width:180px">
            <label for="generatedCode">Código generado</label>
            <input id="generatedCode" readonly style="width:100%;padding:8px;border:1px solid #e6e7eb;border-radius:8px;background:#f3f4f6" />
          </div>
        </div>

        <table id="productsTable" style="width:100%;margin-top:12px;border-collapse:collapse">
          <thead><tr style="text-align:left;border-bottom:1px solid #eef2f6"><th>ID</th><th>Código</th><th>Descripción</th><th>Precio USD</th><th></th></tr></thead>
          <tbody></tbody>
        </table>
        <!-- Product edit modal -->
        <div id="productModal" role="dialog" aria-hidden="true" style="display:none;position:fixed;inset:0;background:rgba(0,0,0,0.4);align-items:center;justify-content:center;padding:20px">
          <div style="background:var(--card);max-width:420px;width:100%;padding:18px;border-radius:10px;box-shadow:0 10px 40px rgba(2,6,23,0.2);position:relative">
            <button id="closeProductModal" class="btn-secondary" style="position:absolute;right:10px;top:10px">Cerrar</button>
            <h2>Editar producto</h2>
            <input id="editProdId" type="hidden" />
            <div style="margin-top:8px"><label>Código</label><input id="editProdCode" readonly style="width:100%;padding:8px;border:1px solid #e6e7eb;border-radius:8px;background:#f3f4f6" /></div>
            <div style="margin-top:8px"><label>Descripción</label><input id="editProdDesc" style="width:100%;padding:8px;border:1px solid #e6e7eb;border-radius:8px" /></div>
            <div style="margin-top:8px"><label>Precio USD</label><input id="editProdPrice" type="number" step="0.01" style="width:100%;padding:8px;border:1px solid #e6e7eb;border-radius:8px" /></div>
            <div style="margin-top:12px;display:flex;gap:8px;justify-content:flex-end"><button id="saveProdModal" class="btn-success">Guardar</button><button id="cancelProdModal" class="btn-danger">Cancelar</button></div>
          </div>
        </div>
      </section>

      <section id="view-clientes" class="view-section" style="display:none;background:var(--card);padding:28px;border-radius:10px;box-shadow:0 8px 30px rgba(0,0,0,0.06)">
        <h1>Clientes</h1>
        <div style="display:flex;gap:12px;align-items:flex-end;flex-wrap:wrap">
          <div style="flex:2;min-width:220px">
            <label for="clientName">Nombre</label>
            <input id="clientName" style="width:100%;padding:8px;border:1px solid #e6e7eb;border-radius:8px" />
          </div>
          <div style="width:220px;display:flex;gap:8px;align-items:center">
            <div style="width:70px">
              <label for="clientRifType">Tipo</label>
              <select id="clientRifType" style="width:100%;padding:8px;border:1px solid #e6e7eb;border-radius:8px">
                <option value="V">V</option>
                <option value="E">E</option>
                <option value="J">J</option>
                <option value="G">G</option>
              </select>
            </div>
            <div style="flex:1">
              <label for="clientRifNumber">RIF/CI</label>
              <input id="clientRifNumber" style="width:100%;padding:8px;border:1px solid #e6e7eb;border-radius:8px" />
            </div>
          </div>
          <div style="width:160px">
            <label for="clientPhone">Teléfono</label>
            <input id="clientPhone" style="width:100%;padding:8px;border:1px solid #e6e7eb;border-radius:8px" />
          </div>
          <div style="flex:1;min-width:220px">
            <label for="clientAddress">Dirección</label>
            <input id="clientAddress" style="width:100%;padding:8px;border:1px solid #e6e7eb;border-radius:8px" />
          </div>
          <div><button id="addClient" class="btn-success">Agregar cliente</button></div>
        </div>

        <table id="clientsTable" style="width:100%;margin-top:12px;border-collapse:collapse">
          <thead><tr style="text-align:left;border-bottom:1px solid #eef2f6"><th>ID</th><th>Nombre</th><th>RIF/CI</th><th>Teléfono</th><th>Dirección</th><th></th></tr></thead>
          <tbody></tbody>
        </table>
        <!-- Client edit modal -->
        <div id="clientModal" role="dialog" aria-hidden="true" style="display:none;position:fixed;inset:0;background:rgba(0,0,0,0.4);align-items:center;justify-content:center;padding:20px">
          <div style="background:var(--card);max-width:520px;width:100%;padding:18px;border-radius:10px;box-shadow:0 10px 40px rgba(2,6,23,0.2);position:relative">
            <button id="closeClientModal" class="btn-secondary" style="position:absolute;right:10px;top:10px">Cerrar</button>
            <h2>Editar cliente</h2>
            <input id="editClientId" type="hidden" />
            <div style="margin-top:8px;display:flex;gap:8px;align-items:end">
              <div style="flex:1;min-width:200px"><label>Nombre</label><input id="editClientName" style="width:100%;padding:8px;border:1px solid #e6e7eb;border-radius:8px" /></div>
              <div style="width:120px"><label>Tipo</label><select id="editClientRifType" style="width:100%;padding:8px;border:1px solid #e6e7eb;border-radius:8px"><option value="V">V</option><option value="E">E</option><option value="J">J</option><option value="G">G</option></select></div>
              <div style="flex:1;min-width:160px"><label>RIF/CI</label><input id="editClientRifNumber" style="width:100%;padding:8px;border:1px solid #e6e7eb;border-radius:8px" /></div>
            </div>
            <div style="margin-top:8px;display:flex;gap:8px;align-items:end">
              <div style="width:180px"><label>Teléfono</label><input id="editClientPhone" style="width:100%;padding:8px;border:1px solid #e6e7eb;border-radius:8px" /></div>
              <div style="flex:1;min-width:200px"><label>Dirección</label><input id="editClientAddress" style="width:100%;padding:8px;border:1px solid #e6e7eb;border-radius:8px" /></div>
            </div>
            <div style="margin-top:12px;display:flex;gap:8px;justify-content:flex-end"><button id="saveClientModal" class="btn-success">Guardar</button><button id="cancelClientModal" class="btn-danger">Cancelar</button></div>
          </div>
        </div>
      </section>
    </main>

    <!-- Confirm modal (reutilizable) -->
    <div id="confirmModal" role="dialog" aria-hidden="true" style="display:none;position:fixed;inset:0;background:rgba(0,0,0,0.4);align-items:center;justify-content:center;padding:20px">
      <div style="background:var(--card);max-width:420px;width:100%;padding:18px;border-radius:10px;box-shadow:0 10px 40px rgba(2,6,23,0.2);position:relative">
        <h3 id="confirmTitle">Confirmar</h3>
        <div id="confirmMessage" style="margin-top:8px;color:var(--muted)">¿Confirmar acción?</div>
        <div style="margin-top:12px;display:flex;gap:8px;justify-content:flex-end"><button id="confirmOk" class="btn-success">Confirmar</button><button id="confirmCancel" class="btn-secondary">Cancelar</button></div>
      </div>
    </div>

  <script>
      const profileBtn = document.getElementById('profileBtn');
      const profileMenu = document.getElementById('profileMenu');
        profileBtn.addEventListener('click', ()=> {
          const open = profileMenu.style.display !== 'block';
          profileMenu.style.display = open ? 'block' : 'none';
          profileBtn.setAttribute('aria-expanded', open ? 'true' : 'false');
        });
        profileBtn.addEventListener('keydown',(e)=>{ if(e.key === 'Enter' || e.key === ' ') profileBtn.click(); });
  const hamburger = document.getElementById('hamburger');
  const mobileMenu = document.getElementById('mobileMenu');
    if(hamburger){
      hamburger.addEventListener('click', ()=>{
        const open = mobileMenu.style.display !== 'block';
        if(open){
          mobileMenu.style.display = 'block';
          mobileMenu.classList.remove('mobile-leave');
          mobileMenu.classList.add('mobile-enter');
          mobileMenu.setAttribute('aria-hidden','false');
          hamburger.setAttribute('aria-expanded','true');
          hamburger.setAttribute('aria-label','Cerrar menú');
          // ensure profile dropdown closed when mobile menu opens
          profileMenu.style.display = 'none';
          profileBtn.setAttribute('aria-expanded','false');
            // focus first menu item for keyboard users
            const first = mobileMenu.querySelector('[role="menuitem"]');
            if(first) first.focus();
        } else {
          mobileMenu.classList.remove('mobile-enter');
          mobileMenu.classList.add('mobile-leave');
          hamburger.setAttribute('aria-expanded','false');
          mobileMenu.setAttribute('aria-hidden','true');
          hamburger.setAttribute('aria-label','Abrir menú');
          setTimeout(()=> mobileMenu.style.display = 'none', 190);
        }
      });
      hamburger.addEventListener('keydown',(e)=>{ if(e.key === 'Enter' || e.key === ' ') hamburger.click(); });
    }

  // Close mobile menu when selecting an item and make links keyboard/touch friendly
  const mobileLinks = document.querySelectorAll('#mobileMenu [role="menuitem"]');
  mobileLinks.forEach(link => {
      // make focus styles available
      link.setAttribute('tabindex','0');
      link.addEventListener('click', ()=>{
        // close mobile menu on selection (small delay to allow navigation)
        mobileMenu.classList.remove('mobile-enter');
        mobileMenu.classList.add('mobile-leave');
        mobileMenu.setAttribute('aria-hidden','true');
        hamburger.setAttribute('aria-expanded','false');
        hamburger.setAttribute('aria-label','Abrir menú');
        setTimeout(()=> mobileMenu.style.display = 'none', 190);
      });
      link.addEventListener('keydown', (e)=>{ if(e.key === 'Enter' || e.key === ' ') link.click(); });
    });

    // In-page view switching
    const navLinks = document.querySelectorAll('.navcenter [data-view]');
    function showView(name){
      // hide all
      document.querySelectorAll('.view-section').forEach(s=> s.style.display = 'none');
      const el = document.getElementById('view-' + name);
      if(el) el.style.display = '';
      // update active classes
      navLinks.forEach(a=> a.classList.toggle('active', a.dataset.view === name));
      mobileLinks.forEach(m=> m.classList.toggle('active', m.dataset.view === name));
      // update hash for back/forward support
      history.replaceState(null,'', '#'+name);
      // trigger loaders for the view so mobile selection also fetches data
      try{ if(name === 'documentos' && typeof loadDocs === 'function') loadDocs(); }catch(e){}
      try{ if(name === 'inventario' && typeof loadProducts === 'function') loadProducts(); }catch(e){}
      try{ if(name === 'clientes' && typeof loadClients === 'function') loadClients(); }catch(e){}
    }

    navLinks.forEach(a=>{
      a.addEventListener('click', (e)=>{ e.preventDefault(); showView(a.dataset.view); });
      a.addEventListener('keydown', (e)=>{ if(e.key==='Enter' || e.key===' ') a.click(); });
    });

    mobileLinks.forEach(m => {
      m.addEventListener('click', (e)=>{
        // existing mobile close behavior
        mobileMenu.classList.remove('mobile-enter');
        mobileMenu.classList.add('mobile-leave');
        mobileMenu.setAttribute('aria-hidden','true');
        hamburger.setAttribute('aria-expanded','false');
        hamburger.setAttribute('aria-label','Abrir menú');
        setTimeout(()=> mobileMenu.style.display = 'none', 190);
        // show view
        const v = m.dataset.view;
        if(v) showView(v);
      });
    });

    // show view from hash on load
    const initialHash = location.hash.replace('#','');
    if(initialHash) showView(initialHash);

    // Modal helpers: open/close with focus restore and ESC handling
    (function(){
      let lastOpener = null;
      function focusFirst(modal){
        const focusable = modal.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
        if(focusable && focusable.length) focusable[0].focus();
      }
      window.openModal = function(modal, opener){
        if(!modal) return; lastOpener = opener || document.activeElement; modal.style.display = 'flex'; modal.setAttribute('aria-hidden','false'); focusFirst(modal);
        // attach ESC handler
        modal.__esc = function(e){ if(e.key === 'Escape'){ window.closeModal(modal); } };
        document.addEventListener('keydown', modal.__esc);
      }
      window.closeModal = function(modal){
        if(!modal) return; modal.style.display = 'none'; modal.setAttribute('aria-hidden','true'); try{ document.removeEventListener('keydown', modal.__esc); }catch(e){}
        if(lastOpener && typeof lastOpener.focus === 'function') lastOpener.focus(); lastOpener = null;
      }
    })();

    // reusable confirm modal returning a Promise<boolean>
    function showConfirm(message, title='Confirmar'){
      return new Promise((resolve)=>{
        const modal = document.getElementById('confirmModal');
        const msg = document.getElementById('confirmMessage');
        const t = document.getElementById('confirmTitle');
        const ok = document.getElementById('confirmOk');
        const cancel = document.getElementById('confirmCancel');
        if(!modal || !ok || !cancel || !msg) return resolve(false);
        msg.textContent = message || '';
        if(t) t.textContent = title;
        function cleanup(){ ok.removeEventListener('click', onOk); cancel.removeEventListener('click', onCancel); window.closeModal(modal); }
        function onOk(){ cleanup(); resolve(true); }
        function onCancel(){ cleanup(); resolve(false); }
        ok.addEventListener('click', onOk);
        cancel.addEventListener('click', onCancel);
        window.openModal(modal, document.activeElement);
      });
    }

      async function loadSession(){
        const res = await fetch('/api/session');
        const data = await res.json();
        if(data.ok){
          document.getElementById('welcome').textContent = `Hola, ${data.usuario} — rol: ${data.role}`;
          // role based UI
          if(data.role !== 'admin'){
            document.getElementById('createUser').style.display = 'none';
            document.getElementById('viewUsers').style.display = 'none';
          }
        } else {
          // not logged in, redirect to home
          window.location.href = '/';
        }
      }

      document.getElementById('logout').addEventListener('click', async (e)=>{
        e.preventDefault();
        await fetch('/api/logout', { method:'POST' });
        window.location.href = '/';
      });

      // profile actions
      document.getElementById('changePwd').addEventListener('click', (e)=>{ e.preventDefault(); alert('Funcionalidad no implementada aún'); });
      document.getElementById('createUser').addEventListener('click', (e)=>{ e.preventDefault(); alert('Funcionalidad no implementada aún'); });
      document.getElementById('viewUsers').addEventListener('click', (e)=>{ e.preventDefault(); alert('Funcionalidad no implementada aún'); });

      // Close dropdown when clicking outside
      document.addEventListener('click', (e)=>{
        if(!profileBtn.contains(e.target) && !profileMenu.contains(e.target)) profileMenu.style.display = 'none';
      });

      loadSession();

      // Simple toast helper injected to window for inline use
      if(!window.showToast){
        window.showToast = function(message, type='info', timeout=3000){
          let root = document.getElementById('toast-root');
          if(!root){ root = document.createElement('div'); root.id='toast-root'; root.style.position='fixed'; root.style.right='18px'; root.style.top='18px'; root.style.zIndex='9999'; document.body.appendChild(root); }
          const el = document.createElement('div'); el.className = 'toast '+type; el.textContent = message; el.style.marginTop='8px'; el.style.padding='10px 14px'; el.style.borderRadius='8px'; el.style.color='#fff'; el.style.boxShadow='0 8px 24px rgba(2,6,23,0.12)'; el.style.opacity='0'; el.style.transition='opacity 220ms, transform 220ms'; el.style.transform='translateY(-6px)';
          if(type==='success') el.style.background='#10b981'; else if(type==='error') el.style.background='#ef4444'; else if(type==='warning') el.style.background='#f59e0b'; else el.style.background='#2563eb';
          root.appendChild(el); requestAnimationFrame(()=>{ el.style.opacity='1'; el.style.transform='translateY(0)'; }); setTimeout(()=>{ el.style.opacity='0'; el.style.transform='translateY(-6px)'; setTimeout(()=> el.remove(),260); }, timeout);
          return el;
        }
      }

    // --- Script para crear documento: poblar clientes/productos, agregar items y enviar ---
    (function(){
      const clienteSel = document.getElementById('cliente');
      const productSearch = document.getElementById('productSearch');
      const qtyInput = document.getElementById('qty');
      const unitPriceInput = document.getElementById('unitPrice');
      const addItemBtn = document.getElementById('addItem');
      const itemsTbody = document.querySelector('#itemsTable tbody');
      const subtotalEl = document.getElementById('subtotal');
      const taxEl = document.getElementById('tax');
      const totalEl = document.getElementById('total');
      const form = document.getElementById('createDocForm');
      const tipoSel = document.getElementById('tipo');
      const currencySel = document.getElementById('currency');
  const exchangeRateInput = document.getElementById('exchangeRate');
  const bcvRateDisplay = document.getElementById('bcvRateDisplay');

  let productsCache = [];
  let lastBcvValue = null;

      // Fetch dashboard stats and populate stat cards
      async function loadDashboardStats(){
        try{
          const res = await fetch('/api/dashboard');
          const j = await res.json();
          if(j.ok && j.data){
            document.getElementById('stat-products').textContent = j.data.productsCount;
            document.getElementById('stat-clients').textContent = j.data.clientsCount;
            document.getElementById('stat-quotes').textContent = j.data.pendingQuotesCount;
            document.getElementById('stat-sales').textContent = (Number(j.data.totalSalesUsd) || 0).toFixed(2);
          } else {
            console.warn('dashboard API error', j);
          }
        }catch(err){ console.error('Error loading dashboard stats', err); }
      }
      loadDashboardStats();
      // Auto-refresh every 30s, but pause when page is hidden to save resources
      const DASH_REFRESH_MS = 30000;
      let dashRefreshHandle = null;
      function startDashAutoRefresh(){
        if(dashRefreshHandle) clearInterval(dashRefreshHandle);
        dashRefreshHandle = setInterval(loadDashboardStats, DASH_REFRESH_MS);
      }
      function stopDashAutoRefresh(){ if(dashRefreshHandle){ clearInterval(dashRefreshHandle); dashRefreshHandle = null; } }
      document.addEventListener('visibilitychange', ()=>{
        if(document.hidden) stopDashAutoRefresh(); else { loadDashboardStats(); startDashAutoRefresh(); }
      });
      startDashAutoRefresh();

      async function fetchClients(){
        try{
          const r = await fetch('/api/clientes');
          const j = await r.json();
          clienteSel.innerHTML = '';
          if(j.ok && Array.isArray(j.data)){
            clienteSel.appendChild(new Option('-- Seleccione --',''));
            j.data.forEach(c => clienteSel.appendChild(new Option(c.name, c.id)));
          } else {
            clienteSel.appendChild(new Option('Error cargando clientes',''));
          }
        }catch(err){
          clienteSel.innerHTML = '';
          clienteSel.appendChild(new Option('Error conectando',''));
        }
      }

      async function fetchProducts(){
        try{
          const r = await fetch('/api/productos');
          const j = await r.json();
          productsCache = j.ok ? j.data : [];
        }catch(e){ productsCache = []; }
      }

      // Debounce helper
      function debounce(fn, wait=250){ let t; return (...args)=>{ clearTimeout(t); t=setTimeout(()=>fn(...args), wait); }; }

      // Disable exchange rate input when currency is USD
      async function fetchAndSetBcv(){
        try{
          const r = await fetch('/api/bcv');
          const j = await r.json();
          if(j.ok && j.price){
            exchangeRateInput.value = String(j.price);
            lastBcvValue = Number(j.price);
            exchangeRateInput.disabled = true;
            if(bcvRateDisplay) bcvRateDisplay.textContent = `BCV: ${exchangeRateInput.value}`;
            recalc(); refreshRows();
            return true;
          }
        }catch(err){ }
        return false;
      }

      function updateExchangeRateState(){
        const cur = (currencySel.value||'').toUpperCase();
        if(cur === 'USD'){
          exchangeRateInput.value = '1.0';
          exchangeRateInput.disabled = true;
          if(bcvRateDisplay) bcvRateDisplay.textContent = '';
        } else {
          exchangeRateInput.disabled = false;
          // if VES, try to auto-fill from BCV proxy
          if(cur === 'VES'){
            // automatically fetch and set BCV rate
            fetchAndSetBcv();
          }
        }
        // update BCV display
        if(bcvRateDisplay){
          if(currencySel.value === 'VES' && lastBcvValue != null){
            bcvRateDisplay.textContent = `BCV: ${String(lastBcvValue)}`;
            exchangeRateInput.disabled = true;
          } else {
            bcvRateDisplay.textContent = '';
            if(currencySel.value !== 'USD') exchangeRateInput.disabled = false;
          }
        }
      }
      currencySel.addEventListener('change', updateExchangeRateState);
      // no checkbox: BCV rate is fetched automatically when currency is VES
      // init state
      updateExchangeRateState();
  // ensure totals update when currency or tipo change
  currencySel.addEventListener('change', ()=>{ recalc(); refreshRows(); });
  tipoSel.addEventListener('change', ()=>{ recalc(); });

      const resultsRoot = document.getElementById('productResults');
      function renderProductResults(list){
        resultsRoot.innerHTML = '';
        if(!list || list.length === 0){ resultsRoot.style.display = 'none'; return; }
        list.forEach((p, idx) => {
          const el = document.createElement('div');
          el.setAttribute('role','option');
          el.className = 'product-result';
          el.style.padding = '8px';
          el.style.borderRadius = '6px';
          el.style.cursor = 'pointer';
          el.dataset.idx = idx;
          el.dataset.id = p.id;
          el.innerHTML = `<div style="font-weight:600">${p.product_code} — ${p.description}</div><div style="font-size:12px;color:var(--muted)">Precio USD: ${Number(p.price_usd).toFixed(2)}</div>`;
          el.addEventListener('click', ()=> selectProductFromResult(p));
          resultsRoot.appendChild(el);
        });
        resultsRoot.style.display = 'block';
      }

      function findProductsQuery(q){
        const s = String(q||'').toLowerCase().trim();
        if(!s) return [];
        return productsCache.filter(p => p.product_code.toLowerCase().includes(s) || p.description.toLowerCase().includes(s)).slice(0,8);
      }

      function selectProductFromResult(p){
        // fill productSearch with code - description, set selection data, prefill unit price
        productSearch.value = `${p.product_code} - ${p.description}`;
        productSearch.dataset.selectedId = p.id;
        unitPriceInput.value = Number(p.price_usd).toFixed(4);
        resultsRoot.style.display = 'none';
        qtyInput.focus();
      }

      const onProductInput = debounce(async function(e){
        const q = productSearch.value.trim();
        if(!q){ resultsRoot.style.display = 'none'; productSearch.dataset.selectedId = ''; return; }
        // ensure cache
        if(productsCache.length === 0) await fetchProducts();
        const list = findProductsQuery(q);
        renderProductResults(list);
      }, 200);

      productSearch.addEventListener('input', onProductInput);
      productSearch.addEventListener('keydown', (e)=>{
        const visible = resultsRoot.style.display === 'block';
        if(!visible) return;
        const items = Array.from(resultsRoot.children);
        const active = resultsRoot.querySelector('.active');
        let idx = active ? items.indexOf(active) : -1;
        if(e.key === 'ArrowDown'){
          e.preventDefault(); idx = Math.min(items.length-1, idx+1); items.forEach(it=>it.classList.remove('active')); if(items[idx]) items[idx].classList.add('active');
        } else if(e.key === 'ArrowUp'){
          e.preventDefault(); idx = Math.max(0, idx-1); items.forEach(it=>it.classList.remove('active')); if(items[idx]) items[idx].classList.add('active');
        } else if(e.key === 'Enter'){
          e.preventDefault(); if(items[idx]){
            const id = items[idx].dataset.id; const p = productsCache.find(x=>String(x.id)===String(id)); if(p) selectProductFromResult(p);
          }
        } else if(e.key === 'Escape'){
          resultsRoot.style.display = 'none';
        }
      });

      // click outside closes results
      document.addEventListener('click', (ev)=>{ if(!ev.target.closest('#productResults') && ev.target !== productSearch) resultsRoot.style.display = 'none'; });

      function findProduct(query){
        const q = String(query||'').toLowerCase();
        return productsCache.find(p => p.product_code.toLowerCase() === q || p.description.toLowerCase().includes(q));
      }

      function recalc(){
        let subtotal = 0;
        itemsTbody.querySelectorAll('tr').forEach(tr => {
          const total = parseFloat(tr.dataset.lineTotal || '0');
          subtotal += total;
        });
        const currency = (currencySel.value||'').toUpperCase();
        let tax = 0;
        if(currency === 'USD'){
          // no IVA when payment is in USD
          tax = 0;
        } else {
          tax = +(subtotal * 0.16).toFixed(2);
        }
  const total = +(subtotal + tax).toFixed(2);
  subtotalEl.textContent = subtotal.toFixed(2);
  taxEl.textContent = tax.toFixed(2);
  totalEl.textContent = total.toFixed(2);
  // BSF equivalents
  const ex = Number(exchangeRateInput.value) || 1.0;
  const subtotalBsfEl = document.getElementById('subtotalBsf');
  const taxBsfEl = document.getElementById('taxBsf');
  const totalBsfEl = document.getElementById('totalBsf');
  if(subtotalBsfEl){ subtotalBsfEl.textContent = (subtotal * ex).toFixed(2); }
  if(taxBsfEl){ taxBsfEl.textContent = (tax * ex).toFixed(2); }
  if(totalBsfEl){ totalBsfEl.textContent = (total * ex).toFixed(2); }
        // show IVA note on quotes/notes when currency is USD
        const ivaNoteEl = document.getElementById('ivaNote');
        const usdTotals = document.getElementById('usdTotals');
        const bsfTotals = document.getElementById('bsfTotals');
        if(usdTotals && bsfTotals){
          if(currency === 'USD'){
            usdTotals.style.display = 'block';
            bsfTotals.style.display = 'none';
          } else {
            usdTotals.style.display = 'none';
            bsfTotals.style.display = 'block';
          }
        }
        if(ivaNoteEl){
          if(currency === 'USD' && tipoSel.value === 'CT'){
            ivaNoteEl.style.display = 'block';
          } else {
            ivaNoteEl.style.display = 'none';
          }
        }
        // update items table headers to reflect currency
        const unitHeader = document.querySelector('#itemsTable thead th:nth-child(3)');
        const totalHeader = document.querySelector('#itemsTable thead th:nth-child(5)');
        if(unitHeader) unitHeader.textContent = currency === 'USD' ? 'P.Unit (USD)' : 'P.Unit (Bs.F)';
        if(totalHeader) totalHeader.textContent = currency === 'USD' ? 'Total (USD)' : 'Total (Bs.F)';
      }

      function createRow(item){
        const tr = document.createElement('tr');
        // store USD values for later conversions
        tr.dataset.unitUsd = Number(item.unit_price_usd).toFixed(4);
        tr.dataset.qty = Number(item.quantity);
        tr.dataset.totalUsd = Number(item.total).toFixed(2);
        tr.dataset.lineTotal = item.total.toFixed(2);
        const currency = (currencySel.value||'').toUpperCase();
        const ex = Number(exchangeRateInput.value) || 1.0;
        let unitDisplay = tr.dataset.unitUsd;
        let totalDisplay = tr.dataset.totalUsd;
        if(currency !== 'USD'){
          unitDisplay = (Number(tr.dataset.unitUsd) * ex).toFixed(2);
          totalDisplay = (Number(tr.dataset.totalUsd) * ex).toFixed(2);
        }
    tr.innerHTML = `<td>${item.description || ''}</td><td>${item.quantity}</td><td>${unitDisplay}</td><td>${Number(item.discount||0).toFixed(2)}</td><td>${totalDisplay}</td><td><button type="button" class="removeItem btn-danger">Eliminar</button></td>`;
  tr.querySelector('.removeItem').addEventListener('click', ()=>{ tr.remove(); recalc(); refreshRows(); });
        itemsTbody.appendChild(tr);
      }

      function refreshRows(){
        const currency = (currencySel.value||'').toUpperCase();
        const ex = Number(exchangeRateInput.value) || 1.0;
        Array.from(itemsTbody.querySelectorAll('tr')).forEach(tr => {
          const unitUsd = Number(tr.dataset.unitUsd || '0');
          const qty = Number(tr.dataset.qty || '0');
          const totalUsd = Number(tr.dataset.totalUsd || '0');
          const unitDisplay = currency === 'USD' ? unitUsd.toFixed(4) : (unitUsd * ex).toFixed(2);
          const totalDisplay = currency === 'USD' ? totalUsd.toFixed(2) : (totalUsd * ex).toFixed(2);
          // update cells: unit is 3rd cell (index 2), total is 5th cell (index 4)
          const cols = tr.children;
          if(cols[2]) cols[2].textContent = unitDisplay;
          if(cols[4]) cols[4].textContent = totalDisplay;
        });
      }

  addItemBtn.addEventListener('click', ()=>{
    const q = parseFloat(qtyInput.value || '0');
    const up = parseFloat(unitPriceInput.value || '0');
  if(q <= 0 || up <= 0) return (window.showToast || (()=>alert('Cantidad y precio deben ser mayores que cero')))('Cantidad y precio deben ser mayores que cero','error');
    const selectedId = productSearch.dataset.selectedId;
    let found = null;
    if(selectedId){ found = productsCache.find(p => String(p.id) === String(selectedId)); }
    if(!found) found = findProduct(productSearch.value.trim());
    const desc = found ? `${found.product_code} - ${found.description}` : productSearch.value.trim();
    const total = +(q * up).toFixed(2);
    const item = { product_id: found ? found.id : null, description: desc, quantity: q, unit_price_usd: up, discount: 0, total };
  createRow(item);
  recalc();
  refreshRows();
    // clear product fields and selection
    productSearch.value = '';
    productSearch.dataset.selectedId = '';
    qtyInput.value = '1';
    unitPriceInput.value = '0.00';
  });

      form.addEventListener('submit', async (e)=>{
        e.preventDefault();
        const items = [];
        itemsTbody.querySelectorAll('tr').forEach(tr => {
          const cols = tr.children;
          const description = cols[0].textContent.trim();
          const quantity = parseFloat(cols[1].textContent.trim());
          // read unit price in USD from data attribute to avoid reading Bs.F displayed value
          const unit_price_usd = parseFloat(tr.dataset.unitUsd || cols[2].textContent.trim());
          const discount = parseFloat(cols[3].textContent.trim()) || 0;
          const total = parseFloat(cols[4].textContent.trim()) || 0;
          items.push({ product_id: null, description, quantity, unit_price_usd, discount });
        });
  if(items.length === 0) return (window.showToast || (()=>alert('Agregue al menos un item')))('Agregue al menos un item','warning');

        const payload = {
          tipo: tipoSel.value || 'CT',
          cliente_id: clienteSel.value || null,
          currency: currencySel.value || 'USD',
          exchange_rate: parseFloat(exchangeRateInput.value) || 1.0,
          bcv_rate: (currencySel.value === 'VES') ? (lastBcvValue != null ? lastBcvValue : parseFloat(exchangeRateInput.value) || null) : null,
          items
        };

        try{
          const res = await fetch('/api/documentos', { method:'POST', headers:{ 'Content-Type':'application/json' }, body: JSON.stringify(payload) });
          const j = await res.json();
          if(j.ok){
            (window.showToast || (()=>alert()))(`Documento guardado: ${j.doc_number}`,'success');
            // limpiar formulario
            itemsTbody.innerHTML = '';
            recalc();
            showView('documentos');
          } else {
            (window.showToast || (()=>alert()))(`Error: ${j.error || 'Error al guardar'}`,'error');
          }
        }catch(err){
          document.getElementById('createResult').textContent = `Error: ${err.message}`;
        }
      });

      // Initialize caches
      fetchClients();
      fetchProducts();
    })();

    // --- Inventario: list, create, edit, delete ---
    (function(){
      const productsTbody = document.querySelector('#productsTable tbody');
      const addBtn = document.getElementById('addProduct');
  const newDesc = document.getElementById('newDesc');
  const newPrice = document.getElementById('newPrice');
  const newStock = document.getElementById('newStock');
  const generatedCode = document.getElementById('generatedCode');

      async function loadProducts(){
        try{
          if(generatedCode) generatedCode.value = '';
          const r = await fetch('/api/productos');
          const j = await r.json();
          productsTbody.innerHTML = '';
          if(j.ok && Array.isArray(j.data)){
            j.data.forEach(p => {
              const tr = document.createElement('tr');
              tr.innerHTML = `<td>${p.id}</td><td>${p.product_code}</td><td>${p.description}</td><td>${Number(p.price_usd).toFixed(2)}</td><td><button class="editProd btn-success" data-id="${p.id}" data-code="${p.product_code}" data-desc="${p.description}" data-price="${Number(p.price_usd).toFixed(2)}"><svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6" stroke-linecap="round" stroke-linejoin="round" style="flex-shrink:0;margin-right:6px"><path d="M12 20h9"/><path d="M16.5 3.5a2.1 2.1 0 0 1 3 3L7 19l-4 1 1-4L16.5 3.5z"/></svg>Editar</button> <button class="delProd btn-danger" data-id="${p.id}"><svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6" stroke-linecap="round" stroke-linejoin="round" style="flex-shrink:0;margin-right:6px"><polyline points="3 6 5 6 21 6"/><path d="M19 6l-1 14a2 2 0 0 1-2 2H8a2 2 0 0 1-2-2L5 6"/></svg>Eliminar</button></td>`;
              productsTbody.appendChild(tr);
            });
            productsTbody.querySelectorAll('.delProd').forEach(b=> b.addEventListener('click', async ()=>{
              const id=b.dataset.id;
              if(!(await showConfirm('Eliminar producto?'))) return;
              try{ const r = await fetch(`/api/productos/${id}`, { method:'DELETE' }); const j=await r.json(); if(j.ok){ window.showToast('Producto eliminado','success'); loadProducts(); } else window.showToast('Error al eliminar','error'); }catch(e){ window.showToast('Error al eliminar','error'); }
            }));
            // modal handlers (save/cancel)
            const productModal = document.getElementById('productModal');
            const closeProductModal = document.getElementById('closeProductModal');
            const cancelProdModal = document.getElementById('cancelProdModal');
            const saveProdModal = document.getElementById('saveProdModal');
            if(closeProductModal) closeProductModal.addEventListener('click', ()=>{ window.closeModal(productModal); });
            if(cancelProdModal) cancelProdModal.addEventListener('click', ()=>{ window.closeModal(productModal); });
            if(saveProdModal) saveProdModal.addEventListener('click', async ()=>{
              const id = document.getElementById('editProdId').value;
              const desc = document.getElementById('editProdDesc').value.trim();
              const price = parseFloat(document.getElementById('editProdPrice').value) || 0;
              try{
                const r = await fetch(`/api/productos/${id}`, { method:'PUT', headers:{ 'Content-Type':'application/json' }, body: JSON.stringify({ description: desc, price_usd: price }) });
                const j = await r.json();
                if(j.ok){ window.showToast('Producto actualizado','success'); window.closeModal(productModal); loadProducts(); }
                else window.showToast('Error al actualizar','error');
              }catch(e){ window.showToast('Error al actualizar','error'); }
            });
            // edit handler opens modal
            productsTbody.querySelectorAll('.editProd').forEach(b=> b.addEventListener('click', (e)=>{
              const id = b.dataset.id;
              const code = b.dataset.code;
              const desc = b.dataset.desc;
              const price = b.dataset.price;
              // fill modal fields
              const modal = document.getElementById('productModal');
              const editId = document.getElementById('editProdId');
              const editCode = document.getElementById('editProdCode');
              const editDesc = document.getElementById('editProdDesc');
              const editPrice = document.getElementById('editProdPrice');
              editId.value = id;
              editCode.value = code;
              editDesc.value = desc;
              editPrice.value = price;
              window.openModal(modal, b);
            }));
          } else {
            productsTbody.innerHTML = '<tr><td colspan="6">No hay productos</td></tr>';
          }
        }catch(err){ productsTbody.innerHTML = '<tr><td colspan="6">Error al cargar productos</td></tr>'; }
      }

      addBtn.addEventListener('click', async ()=>{
        // limpiar el campo antes de crear para evitar valores antiguos
        if(generatedCode) generatedCode.value = '';
        const payload = { description: newDesc.value.trim(), price_usd: parseFloat(newPrice.value)||0 };
        if(!payload.description) return window.showToast('Descripción requerida','warning');
        try{
          const r = await fetch('/api/productos', { method:'POST', headers:{ 'Content-Type':'application/json' }, body: JSON.stringify(payload) });
          const j = await r.json();
          if(j.ok){ newDesc.value=''; newPrice.value='0.00'; if(generatedCode) generatedCode.value = j.product_code || ''; window.showToast(`Producto creado: ${j.product_code}`,'success');
            // dejar el código visible unos segundos y luego limpiar
            setTimeout(()=>{ if(generatedCode) generatedCode.value = ''; }, 5000);
            loadProducts(); }
          else window.showToast('Error: ' + (j.error||''),'error');
        }catch(err){ window.showToast('Error al crear producto','error'); }
      });

      // load when entering view
      navLinks.forEach(a=>{ if(a.dataset.view === 'inventario') a.addEventListener('click', ()=> setTimeout(loadProducts, 150)); });
      if(location.hash.replace('#','') === 'inventario') loadProducts();
      // expose for mobile menu and global calls
      try{ window.loadProducts = loadProducts; }catch(e){}
    })();

    // --- Clientes CRUD ---
    (function(){
      const clientsTbody = document.querySelector('#clientsTable tbody');
      const addClientBtn = document.getElementById('addClient');
      const clientName = document.getElementById('clientName');
      const clientRifType = document.getElementById('clientRifType');
      const clientRifNumber = document.getElementById('clientRifNumber');
      const clientPhone = document.getElementById('clientPhone');
      const clientAddress = document.getElementById('clientAddress');

      // phone formatting: (412)-7307933 -> (ddd)-xxxxxxx
      function formatPhoneRaw(v){
        const digits = String(v||'').replace(/\D/g,'');
        if(digits.length <= 3) return `(${digits})-`;
        const d = digits.slice(0,3);
        const rest = digits.slice(3,10);
        return `(${d})-${rest}`;
      }
      clientPhone.addEventListener('input', (e)=>{ const d = e.target.value.replace(/\D/g,''); e.target.value = formatPhoneRaw(d); });
      clientPhone.addEventListener('blur', (e)=>{ e.target.value = formatPhoneRaw(e.target.value); });

      async function loadClients(){
        try{
          const r = await fetch('/api/clientes');
          const j = await r.json();
          clientsTbody.innerHTML = '';
          if(j.ok && Array.isArray(j.data)){
            j.data.forEach(c => {
              const tr = document.createElement('tr');
              tr.innerHTML = `<td>${c.id}</td><td>${c.name}</td><td>${c.rif_ci||''}</td><td>${c.phone||''}</td><td>${c.address||''}</td><td><button class="editClient btn-success" data-id="${c.id}"><svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6" stroke-linecap="round" stroke-linejoin="round" style="flex-shrink:0;margin-right:6px"><path d="M12 20h9"/><path d="M16.5 3.5a2.1 2.1 0 0 1 3 3L7 19l-4 1 1-4L16.5 3.5z"/></svg>Editar</button> <button class="delClient btn-danger" data-id="${c.id}"><svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6" stroke-linecap="round" stroke-linejoin="round" style="flex-shrink:0;margin-right:6px"><polyline points="3 6 5 6 21 6"/><path d="M19 6l-1 14a2 2 0 0 1-2 2H8a2 2 0 0 1-2-2L5 6"/></svg>Eliminar</button></td>`;
              clientsTbody.appendChild(tr);
            });
            clientsTbody.querySelectorAll('.delClient').forEach(b=> b.addEventListener('click', async ()=>{
              const id = b.dataset.id;
              if(!(await showConfirm('Eliminar cliente?'))) return;
              try{ const r = await fetch(`/api/clientes/${id}`, { method:'DELETE' }); const j = await r.json(); if(j.ok){ window.showToast('Cliente eliminado','success'); loadClients(); } else window.showToast('Error al eliminar','error'); }catch(e){ window.showToast('Error al eliminar','error'); }
            }));
            // edit via modal: attach handlers that open the client modal
            clientsTbody.querySelectorAll('.editClient').forEach(b=> b.addEventListener('click', ()=>{
              const id = b.dataset.id;
              // prepare modal elements
              const modal = document.getElementById('clientModal');
              const editId = document.getElementById('editClientId');
              const editName = document.getElementById('editClientName');
              const editRifType = document.getElementById('editClientRifType');
              const editRifNumber = document.getElementById('editClientRifNumber');
              const editPhone = document.getElementById('editClientPhone');
              const editAddr = document.getElementById('editClientAddress');
              // fill fields from row data
              const row = b.closest('tr');
              const name = row.children[1].textContent || '';
              const rifFull = row.children[2].textContent || '';
              const phone = row.children[3].textContent || '';
              const addr = row.children[4].textContent || '';
              // split rifFull
              let rtype = '';
              let rnum = rifFull;
              const m = rifFull.match(/^\s*([VEJG])\-?\s*(\d+)$/i);
              if(m){ rtype = m[1].toUpperCase(); rnum = m[2]; }
              editId.value = id;
              editName.value = name;
              editRifType.value = rtype || 'V';
              editRifNumber.value = rnum || '';
              editPhone.value = phone || '';
              editAddr.value = addr || '';
              window.openModal(modal, b);
            }));
            // ensure modal handlers are attached once
            (function(){
              const modal = document.getElementById('clientModal');
              if(!modal) return;
              const closeBtn = document.getElementById('closeClientModal');
              const cancelBtn = document.getElementById('cancelClientModal');
              const saveBtn = document.getElementById('saveClientModal');
              if(closeBtn) closeBtn.addEventListener('click', ()=>{ window.closeModal(modal); });
              if(cancelBtn) cancelBtn.addEventListener('click', ()=>{ window.closeModal(modal); });
              if(saveBtn) saveBtn.addEventListener('click', async ()=>{
                const id = document.getElementById('editClientId').value;
                const name = document.getElementById('editClientName').value.trim();
                const rt = document.getElementById('editClientRifType').value;
                const rn = document.getElementById('editClientRifNumber').value.trim();
                const rif_ci = (rt && rn) ? `${rt}-${rn}` : rn;
                const phone = document.getElementById('editClientPhone').value.trim();
                const addr = document.getElementById('editClientAddress').value.trim();
                if(!name) return window.showToast('Nombre requerido','warning');
                if(!/^\(\d{3}\)-\d{7}$/.test(phone)) return window.showToast('Teléfono debe ser formato (DDD)-XXXXXXX','warning');
                try{
                  const r = await fetch(`/api/clientes/${id}`, { method:'PUT', headers:{ 'Content-Type':'application/json' }, body: JSON.stringify({ name, rif_ci, phone, address: addr }) });
                  const j = await r.json();
                  if(j.ok){ window.showToast('Cliente actualizado','success'); window.closeModal(modal); loadClients(); }
                  else window.showToast('Error al actualizar','error');
                }catch(e){ window.showToast('Error al actualizar','error'); }
              });
              // attach phone formatter to modal phone input
              try{
                const editPhoneInput = document.getElementById('editClientPhone');
                if(editPhoneInput){
                  editPhoneInput.addEventListener('input', (e)=>{ const d = e.target.value.replace(/\D/g,''); e.target.value = formatPhoneRaw(d); });
                  editPhoneInput.addEventListener('blur', (e)=>{ e.target.value = formatPhoneRaw(e.target.value); });
                }
              }catch(e){}
            })();
          } else {
            clientsTbody.innerHTML = '<tr><td colspan="6">No hay clientes</td></tr>';
          }
        }catch(err){ clientsTbody.innerHTML = '<tr><td colspan="6">Error al cargar clientes</td></tr>'; }
      }

      addClientBtn.addEventListener('click', async ()=>{
        const nameVal = clientName.value.trim();
        const rifVal = (clientRifType.value && clientRifNumber.value) ? `${clientRifType.value}-${clientRifNumber.value.trim()}` : clientRifNumber.value.trim();
        const phoneVal = clientPhone.value.trim();
        const addressVal = clientAddress.value.trim();
        if(!nameVal) return alert('Nombre requerido');
        if(!/^\(\d{3}\)-\d{7}$/.test(phoneVal)) return alert('Teléfono debe tener formato (DDD)-XXXXXXX');
        const payload = { name: nameVal, rif_ci: rifVal, phone: phoneVal, address: addressVal };
        try{
          const r = await fetch('/api/clientes', { method:'POST', headers:{ 'Content-Type':'application/json' }, body: JSON.stringify(payload) });
          const j = await r.json();
          if(j.ok){ clientName.value=''; clientRifNumber.value=''; clientPhone.value=''; clientAddress.value=''; loadClients(); }
          else alert('Error: ' + (j.error||''));
        }catch(err){ alert('Error al crear cliente'); }
      });

      // populate when entering view
      navLinks.forEach(a=>{ if(a.dataset.view === 'clientes') a.addEventListener('click', ()=> setTimeout(loadClients, 150)); });
      if(location.hash.replace('#','') === 'clientes') loadClients();
      try{ window.loadClients = loadClients; }catch(e){}
    })();

    // --- Documentos list & detail handling ---
    (function(){
      const docsTableBody = document.querySelector('#docsTable tbody');
      const docModal = document.getElementById('docModal');
      const modalBody = document.getElementById('modalBody');
      const modalDocNumber = document.getElementById('modalDocNumber');
      const closeDocModal = document.getElementById('closeDocModal');
      const deleteDocBtn = document.getElementById('deleteDoc');
      let currentDocId = null;

      async function loadDocs(){
        try{
          const r = await fetch('/api/documentos');
          const j = await r.json();
          docsTableBody.innerHTML = '';
          if(j.ok && Array.isArray(j.data)){
            j.data.forEach(d => {
              const tr = document.createElement('tr');
              const bcvBadge = d.bcv_rate ? `<span class="bcv-badge" data-bcv-rate="${d.bcv_rate}" data-bcv-date="${d.created_at}" style="background:#fde68a;color:#92400e;padding:4px 8px;border-radius:999px;font-size:12px;margin-left:8px;cursor:default">BCV</span>` : '';
              const usdBadge = (d.currency && d.currency.toUpperCase() === 'USD') ? `<span class="usd-badge" style="background:#bbf7d0;color:#064e3b;padding:4px 8px;border-radius:999px;font-size:12px;margin-left:8px">USD</span>` : '';
              tr.innerHTML = `<td>${d.id}</td><td>${d.tipo}</td><td>${d.doc_number}${usdBadge}${bcvBadge}</td><td>${d.cliente||''}</td><td>${Number(d.total_usd).toFixed(2)}</td><td>${new Date(d.created_at).toLocaleString()}</td><td><button class="viewDoc btn-success" data-id="${d.id}"><svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6" stroke-linecap="round" stroke-linejoin="round" style="flex-shrink:0;margin-right:6px"><path d="M2 12s4-8 10-8 10 8 10 8-4 8-10 8S2 12 2 12z"/><circle cx="12" cy="12" r="3"/></svg>Ver</button></td>`;
              docsTableBody.appendChild(tr);
            });
            // attach tooltip handlers to BCV badges
            (function(){
              // create tooltip root if missing
              let tt = document.getElementById('bcv-tooltip');
              if(!tt){
                tt = document.createElement('div'); tt.id = 'bcv-tooltip';
                tt.style.position = 'fixed'; tt.style.zIndex = '99999'; tt.style.pointerEvents = 'none'; tt.style.padding = '8px 10px'; tt.style.background = 'rgba(2,6,23,0.9)'; tt.style.color = '#fff'; tt.style.borderRadius = '6px'; tt.style.fontSize = '13px'; tt.style.boxShadow = '0 6px 20px rgba(2,6,23,0.4)'; tt.style.transition = 'opacity 160ms, transform 160ms'; tt.style.opacity = '0'; tt.style.transform = 'translateY(-6px)'; tt.style.display = 'none'; document.body.appendChild(tt);
              }
              const badges = docsTableBody.querySelectorAll('.bcv-badge');
              badges.forEach(b => {
                b.addEventListener('mouseenter', (e)=>{
                  const rate = b.dataset.bcvRate; const date = b.dataset.bcvDate;
                  const d = date ? new Date(date) : null;
                  const txt = `Tasa BCV: ${Number(rate).toFixed(6)}${d? ' — ' + d.toLocaleString(): ''}`;
                  tt.textContent = txt;
                  tt.style.display = 'block'; tt.style.opacity = '1'; tt.style.transform = 'translateY(0)';
                  const rect = b.getBoundingClientRect();
                  // position above the badge, center aligned
                  const left = Math.min(window.innerWidth - 16 - tt.offsetWidth, Math.max(8, rect.left + (rect.width/2) - (tt.offsetWidth/2)));
                  const top = Math.max(8, rect.top - tt.offsetHeight - 8);
                  tt.style.left = left + 'px'; tt.style.top = top + 'px';
                });
                b.addEventListener('mouseleave', ()=>{
                  tt.style.opacity = '0'; tt.style.transform = 'translateY(-6px)'; setTimeout(()=>{ tt.style.display = 'none'; }, 180);
                });
              });
            })();
            // attach handlers
            docsTableBody.querySelectorAll('.viewDoc').forEach(b => b.addEventListener('click', ()=> openDoc(b.dataset.id)));
          } else {
            docsTableBody.innerHTML = '<tr><td colspan="7">No hay documentos.</td></tr>';
          }
        }catch(err){
          docsTableBody.innerHTML = '<tr><td colspan="7">Error cargando documentos</td></tr>';
        }
      }

      async function openDoc(id){
        try{
          console.log('openDoc', id);
          // ensure modal shows a loading state immediately so user sees feedback
          currentDocId = id;
          modalDocNumber.textContent = `Cargando...`;
          modalBody.innerHTML = `<div style="padding:12px">Cargando documento...</div>`;
          window.openModal(docModal, null);

          const r = await fetch(`/api/documentos/${id}`);
          const j = await r.json();
          if(j.ok){
            modalDocNumber.textContent = j.data.doc_number || `Documento ${id}`;
            // Build a printable 'Nota de Entrega' HTML similar to the reference image
            const currency = (j.data.currency||'USD').toUpperCase();
            const rate = j.data.bcv_rate ? Number(j.data.bcv_rate) : (j.data.exchange_rate ? Number(j.data.exchange_rate) : null);
            function fmt(n, decimals=2){ return Number(n||0).toFixed(decimals); }
            let itemsHtml = '';
            j.data.items.forEach(it => {
              // normalize possible field names
              let code = (it.product_code || it.codigo || it.code || '').toString().trim();
              let desc = (it.description || it.nombre || it.desc || '').toString().trim();
              // If no explicit code, try to extract one from the start of the description
              if(!code && desc){
                // common patterns: "P-000004 - BRAGA", "P000004: BRAGA", "P000004/ BRAGA"
                const m = desc.match(/^\s*([A-Za-z0-9\-_.]+)\s*[-:\/]+\s*(.*)$/);
                if(m){ code = m[1].trim(); desc = (m[2] || '').trim(); }
              }
              // If code exists and description still contains the code at the start, remove it (safety)
              if(code && desc){
                const esc = code.replace(/[.*+?^${}()|[\\]\/\\]/g,'\\$&');
                const pattern = new RegExp('^\\s*' + esc + "\\s*[-:\\/]?\\s*", 'i');
                desc = desc.replace(pattern, '').trim();
              }
              if(currency === 'USD' && !j.data.bcv_rate){
                itemsHtml += `<tr><td style="border:1px solid #000;padding:6px">${code}</td><td style="border:1px solid #000;padding:6px">${desc}</td><td style="border:1px solid #000;padding:6px;text-align:center">${fmt(it.quantity,2)}</td><td style="border:1px solid #000;padding:6px;text-align:right">$ ${fmt(it.unit_price_usd,2)}</td><td style="border:1px solid #000;padding:6px;text-align:right">$ ${fmt(it.total_usd,2)}</td></tr>`;
              } else if(j.data.bcv_rate){
                const unit = Number(it.unit_price_bsf || (it.unit_price_usd * rate));
                const total = Number((it.total_bsf !== undefined) ? it.total_bsf : (it.total_usd * rate));
                itemsHtml += `<tr><td style="border:1px solid #000;padding:6px">${code}</td><td style="border:1px solid #000;padding:6px">${desc}</td><td style="border:1px solid #000;padding:6px;text-align:center">${fmt(it.quantity,2)}</td><td style="border:1px solid #000;padding:6px;text-align:right">Bs.F ${fmt(unit,2)}</td><td style="border:1px solid #000;padding:6px;text-align:right">Bs.F ${fmt(total,2)}</td></tr>`;
              } else {
                itemsHtml += `<tr><td style="border:1px solid #000;padding:6px">${code}</td><td style="border:1px solid #000;padding:6px">${desc}</td><td style="border:1px solid #000;padding:6px;text-align:center">${fmt(it.quantity,2)}</td><td style="border:1px solid #000;padding:6px;text-align:right">$ ${fmt(it.unit_price_usd,2)}</td><td style="border:1px solid #000;padding:6px;text-align:right">$ ${fmt(it.total_usd,2)}</td></tr>`;
              }
            });

            let totalsHtml = '';
            if(currency === 'USD' && !j.data.bcv_rate){
              totalsHtml = `<div style="text-align:right;padding:8px;border:1px solid #000;max-width:220px;margin-left:auto"><div>SUB $ ${fmt(j.data.subtotal_usd,2)}</div><div>IVA ${ (j.data.currency && j.data.currency.toUpperCase()==='USD') ? '0' : '16' }%: $ ${fmt(j.data.tax_usd,2)}</div><div style="font-weight:700;margin-top:6px">TOTAL $ ${fmt(j.data.total_usd,2)}</div></div>`;
            } else if(j.data.bcv_rate){
              const sb = (j.data.subtotal_bsf !== undefined) ? j.data.subtotal_bsf : (Number(j.data.subtotal_usd||0) * rate);
              const tb = (j.data.tax_bsf !== undefined) ? j.data.tax_bsf : (Number(j.data.tax_usd||0) * rate);
              const totb = (j.data.total_bsf !== undefined) ? j.data.total_bsf : (Number(j.data.total_usd||0) * rate);
              totalsHtml = `<div style="text-align:right;padding:8px;border:1px solid #000;max-width:220px;margin-left:auto"><div>SUB Bs.F ${fmt(sb,2)}</div><div>IVA 16%: Bs.F ${fmt(tb,2)}</div><div style="font-weight:700;margin-top:6px">TOTAL Bs.F ${fmt(totb,2)}</div></div>`;
            } else {
              totalsHtml = `<div style="text-align:right;padding:8px;border:1px solid #000;max-width:220px;margin-left:auto"><div>SUB $ ${fmt(j.data.subtotal_usd||0,2)}</div><div>IVA 16%: $ ${fmt(j.data.tax_usd||0,2)}</div><div style="font-weight:700;margin-top:6px">TOTAL $ ${fmt(j.data.total_usd||0,2)}</div></div>`;
            }

            // prefer possible field names for client phone/address and rif
            const clientName = j.data.cliente || j.data.nombre || j.data.client_name || '';
            const clientRif = j.data.cliente_rif || j.data.rif || j.data.rif_ci || '';
            const clientPhone = j.data.cliente_phone || j.data.phone || j.data.telefono || j.data.tel || j.data.contact_phone || '';
            const clientAddress = j.data.cliente_address || j.data.address || j.data.direccion || j.data.contact_address || '';
            const clientHtml = `
              <div style="display:flex;justify-content:space-between;align-items:flex-start;gap:12px">
                <div style="flex:1;font-size:14px;line-height:1.35">
                  <div><strong>Empresa:</strong> ${clientName || '&mdash;'}</div>
                  <div><strong>RIF:</strong> ${clientRif || '&mdash;'}</div>
                  <div><strong>Teléfono:</strong> ${clientPhone || '&mdash;'}</div>
                  <div><strong>Dirección:</strong> ${clientAddress || '&mdash;'}</div>
                </div>
                <div style="text-align:right">
                  <div><strong>Fecha:</strong> ${new Date(j.data.created_at).toLocaleDateString()}</div>
                  <div><strong>Nota Nº:</strong> ${j.data.doc_number||''}</div>
                </div>
              </div>
            `;

            const logoUrl = (typeof location !== 'undefined') ? (location.origin + '/src/img/logo.png') : '/src/img/logo.png'; // usar la ruta proporcionada por el usuario
            const printable = `
              <div style="font-family:Arial,Helvetica,sans-serif;color:#111">
                <div style="text-align:center;margin-bottom:8px"><img src="${logoUrl}" alt="logo" style="max-height:80px"/></div>
                <div style="text-align:center;font-weight:700;margin-bottom:6px">J-40048985-7</div>
                <h2 style="text-align:center;margin:6px 0">Nota de Entrega</h2>
                <div style="border:1px solid #000;padding:10px;margin-bottom:12px">${clientHtml}</div>
                <table style="width:100%;border-collapse:collapse;margin-bottom:12px"><thead><tr style="background:#f3f3f3"><th style="border:1px solid #000;padding:8px">CODIGO</th><th style="border:1px solid #000;padding:8px">DESCRIPCIÓN</th><th style="border:1px solid #000;padding:8px;text-align:center">CANT</th><th style="border:1px solid #000;padding:8px;text-align:right">PRECIO UNITARIO</th><th style="border:1px solid #000;padding:8px;text-align:right">TOTAL</th></tr></thead><tbody>${itemsHtml}</tbody></table>
                ${totalsHtml}
                <!-- Observaciones: incluir nota sobre IVA si el documento está en USD -->
                ${(() => {
                  const obs = (currency === 'USD') ? 'Estos precios no incluyen IVA' : (j.data.observaciones || '');
                  const obsHtml = obs ? `<div style="font-size:13px;color:#111">${obs}</div>` : '<div style="height:1px">&nbsp;</div>';
                  return `<div style="margin-top:12px;border:1px solid #000;padding:8px;min-height:60px"><strong>OBSERVACIONES:</strong>${obsHtml}</div>`;
                })()}
                <div style="margin-top:14px;font-size:12px;color:#666;text-align:center;border-top:1px solid #ddd;padding-top:8px">
                  <div>Av 18 La limpia Sector Miranda la Florida casa 95A-78 - Maracaibo Edo. Zulia</div>
                  <div>Correo: confecciones.hermanos.cantos@hotmail.com &nbsp; / &nbsp; IG: @confeccioneshermanoscantos</div>
                  <div>TlF: 0424-6550993 / 0424-6112097</div>
                </div>
              </div>
            `;

            modalBody.innerHTML = printable + `<div style="display:flex;gap:8px;justify-content:space-between;align-items:center;margin-top:12px"><div class="print-instruction" style="font-size:13px;color:#666">Antes de imprimir: desmarque 'Encabezados y pies' en la ventana de impresión para eliminar fecha/URL/página.</div><div style="display:flex;gap:8px;justify-content:flex-end"><button id="printDoc" class="btn-primary">Imprimir</button></div></div>`;
            // attach print handler
            setTimeout(()=>{
              const printBtn = document.getElementById('printDoc');
              if(printBtn) printBtn.addEventListener('click', ()=>{ const w = window.open('','_blank'); w.document.write(`<html><head><title>${j.data.doc_number}</title></head><body>${printable}</body></html>`); w.document.close(); w.focus(); w.print(); });
            }, 60);
            // modal ya se abrió y el contenido fue establecido en 'modalBody' arriba
          } else {
            console.warn('openDoc: respuesta OK=false', j);
            modalBody.innerHTML = `<div style="color:#b91c1c;padding:12px">No se pudo cargar el documento: ${j.error||'respuesta inválida'}</div>`;
          }
        }catch(err){ console.error('openDoc error', err); modalBody.innerHTML = `<div style="color:#b91c1c;padding:12px">Error al cargar documento</div>`; }
      }

  closeDocModal.addEventListener('click', ()=>{ window.closeModal(docModal); currentDocId = null; });
      deleteDocBtn.addEventListener('click', async ()=>{
        if(!currentDocId) return;
        if(!(await showConfirm('¿Eliminar este documento? Esta acción no se puede deshacer.'))) return;
        try{
          const r = await fetch(`/api/documentos/${currentDocId}`, { method:'DELETE' });
          const j = await r.json();
          if(j.ok){ window.closeModal(docModal); loadDocs(); (window.showToast||(()=>{}))('Documento eliminado','success'); }
          else (window.showToast||(()=>{}))('Error al eliminar','error');
        }catch(err){ (window.showToast||(()=>{}))('Error al eliminar','error'); }
      });

      // load on entering view
      navLinks.forEach(a=>{ if(a.dataset.view === 'documentos') a.addEventListener('click', ()=> setTimeout(loadDocs, 150)); });
      // if loaded from hash
      if(location.hash.replace('#','') === 'documentos') loadDocs();
      try{ window.loadDocs = loadDocs; }catch(e){}
    })();

    </script>
    <style>
      @media print{ .print-instruction{ display:none !important } }
      /* Mobile menu link styles: full-width, large touch area, icon + label */
      #mobileMenu .mobile-link{display:flex;align-items:center;gap:12px;padding:12px;border-radius:8px;color:var(--text);text-decoration:none;margin:6px 4px;transition:background 140ms,transform 140ms;outline:none}
      #mobileMenu .mobile-link svg{width:20px;height:20px;flex-shrink:0;opacity:0.95}
      #mobileMenu .mobile-link span{flex:1;text-align:left}
      #mobileMenu .mobile-link:focus, #mobileMenu .mobile-link:hover{background:#f3f4f6;transform:translateY(-1px)}
      @media (max-width:800px){
        #mobileMenu{margin:8px}
        #mobileMenu .mobile-link{font-size:16px;padding:14px;border-radius:10px}
      }
    </style>
  </body>
</html>
